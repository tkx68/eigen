cabal-version:  >= 1.10
name:           eigen
version:        3.3.7.0
homepage:       https://github.com/chessai/eigen
synopsis:       Eigen C++ library (linear algebra: matrices, sparse matrices, vectors, numerical solvers).
description:    __NOTE__: This library does not follow PVP. Instead, it follows Eigen's versioning. Version
                X.Y.Z.W means that the Eigen version is X.Y.Z, and the haskell release is W, where each W
                release is for bug fixes/API improvements.
                .
                This module provides Haskell binding for <http://eigen.tuxfamily.org/ Eigen C++ library>.
                .
                Eigen is versatile.
                .
                * It supports all matrix sizes, from small fixed-size matrices to arbitrarily large dense matrices, and even sparse matrices.
                .
                * It supports all standard numeric types, including std::complex, integers, and is easily extensible to custom numeric types.
                .
                * It supports various <http://eigen.tuxfamily.org/dox/group__TopicLinearAlgebraDecompositions.html matrix decompositions> and <http://eigen.tuxfamily.org/dox/group__TutorialGeometry.html geometry features>.
                .
                * Its ecosystem of <http://eigen.tuxfamily.org/dox/unsupported/index.html unsupported modules> provides many specialized features such as non-linear optimization, matrix functions, a polynomial solver, FFT, and much more.
                .
                Eigen is fast.
                .
                * Expression templates allow to intelligently remove temporaries and enable <http://eigen.tuxfamily.org/dox/TopicLazyEvaluation.html lazy evaluation>, when that is appropriate.
                .
                * <http://eigen.tuxfamily.org/index.php?title=FAQ#Vectorization Explicit vectorization> is performed for SSE 2\/3\/4, ARM NEON, and AltiVec instruction sets, with graceful fallback to non-vectorized code.
                .
                * Fixed-size matrices are fully optimized: dynamic memory allocation is avoided, and the loops are unrolled when that makes sense.
                .
                * For large matrices, special attention is paid to cache-friendliness.
                .
                Eigen is reliable.
                .
                * Algorithms are carefully selected for reliability. Reliability trade-offs are <http://eigen.tuxfamily.org/dox/group__TopicLinearAlgebraDecompositions.html clearly documented> and <http://eigen.tuxfamily.org/dox/classEigen_1_1JacobiSVD.html extremely> <http://eigen.tuxfamily.org/dox/classEigen_1_1FullPivHouseholderQR.html safe> <http://eigen.tuxfamily.org/dox/classEigen_1_1FullPivLU.html decompositions> are available.
                .
                * Eigen is thoroughly tested through its own <http://eigen.tuxfamily.org/index.php?title=Tests test suite> (over 500 executables), the standard BLAS test suite, and parts of the LAPACK test suite.
                .
                Eigen is elegant.
                .
                * The API is extremely <http://eigen.tuxfamily.org/index.php?title=API_Showcase clean and expressive> while feeling natural to C++ programmers, thanks to expression templates.
                .
                * Implementing an algorithm on top of Eigen feels like just copying pseudocode.
                .
                Eigen has good compiler support as we run our test suite against many compilers to guarantee reliability and work around any compiler bugs.
                Eigen also is standard C++98 and maintains very reasonable compilation times.
                .
                Eigen is licensed under the MPL2, which is a simple weak copyleft license. Common questions about the MPL2 are answered in the official MPL2 FAQ at <http://www.mozilla.org/MPL/2.0/FAQ.html>.
                .
                Note that currently, a few features in Eigen rely on third-party code licensed under the LGPL: SimplicialCholesky, AMD ordering, and constrained_cg. Such features are explicitly disabled by compiling Eigen with the EIGEN_MPL2_ONLY preprocessor symbol defined.
                .
                Virtually any software may use Eigen. For example, closed-source software may use Eigen without having to disclose its own source code. Many proprietary and closed-source software projects are using Eigen right now, as well as many BSD-licensed projects.
                .
                Documentation at the most extent replicates original <http://eigen.tuxfamily.org/dox/ Eigen documentation>.
category:       Data, Math, Algebra, Statistics, Algorithms, Numeric
license:        BSD3
license-file:   LICENSE
copyright:      (c) 2013-2015, Oleg Sidorkin,
                (c) 2018, chessai
author:         Oleg Sidorkin <oleg.sidorkin@gmail.com>
maintainer:     chessai <chessai1996@gmail.com>
build-type:     Simple
tested-with:    GHC == 8.2.2, GHC == 8.4.3, GHC == 8.6.1, GHC == 9.2.3
extra-source-files: cbits/eigen-runtime.h
    cbits/eigen-dense.h
    cbits/eigen-la.h
    cbits/eigen-sparse.h
    cbits/eigen-sparse-la.h
    {eigen3}

source-repository head
  type:     git
  location: git://github.com/chessai/eigen.git


library
    exposed-modules:
      Eigen.Matrix
      Eigen.Matrix.Mutable
      Eigen.SparseMatrix
      Eigen.SparseMatrix.Mutable
      Eigen.Parallel
      Eigen.Internal
      Eigen.Solver.LA
      Eigen.Solver.SparseLA

    hs-source-dirs:
      src
    ghc-options:
      -Wall
    build-depends:
        base >= 4.10 && < 5
      , binary >= 0.8.0.0 && < 0.11
      , bytestring >= 0.10.4.0 && < 0.12.0.0
      , constraints >= 0.10.0 && < 0.14
      , ghc-prim
      , primitive >= 0.6.4.0 && < 0.8
      , transformers >= 0.3 && < 0.6
      , vector >= 0.5 && < 0.14
    default-language:
      Haskell2010
    include-dirs:
        eigen3
      , cbits
    c-sources:
      cbits/eigen-runtime.cpp
      cbits/eigen-dense.cpp
      cbits/eigen-sparse.cpp
      cbits/eigen-la.cpp
      cbits/eigen-sparse-la.cpp
    extra-libraries:
      stdc++

Test-Suite test-solve
  type:               exitcode-stdio-1.0
  main-is:            test/solve.hs
  default-language:   Haskell2010
  build-depends:      base, primitive, vector, bytestring, transformers, binary, eigen, ghc-prim

Test-Suite test-solve-sparse
  type:               exitcode-stdio-1.0
  main-is:            test/solve-sparse.hs
  default-language:   Haskell2010
  build-depends:      base, primitive, vector, bytestring, transformers, mtl, binary, eigen

Test-Suite test-rank
  type:               exitcode-stdio-1.0
  main-is:            test/rank.hs
  default-language:   Haskell2010
  build-depends:      base, primitive, vector, bytestring, transformers, binary, eigen, ghc-prim

Test-Suite test-regression
  type:               exitcode-stdio-1.0
  main-is:            test/regression.hs
  default-language:   Haskell2010
  build-depends:      base, primitive, vector, bytestring, transformers, binary, eigen, ghc-prim
